<!DOCTYPE HTML>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnzhuanxian.github.io/news/article-73367.htm" />
    <title>Kotlin的标准函数和静态方法</title>
        <meta name="description" content="文章目录  标准函数和静态方法   标准函数   with函数 run函数 apply函数   静态方法   单例类 companion object 注解 顶层方法         标准函数  标准" />
    
    <meta name="author" content="VPN专线 订阅机场节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnzhuanxian.github.io/news/article-73367.htm" />
    <meta property="og:site_name" content="VPN专线 订阅机场节点中文网" />
    <meta property="og:title" content="Kotlin的标准函数和静态方法" />
    <meta property="og:image" content="https://vpnzhuanxian.github.io/uploads/20240412/e3c5e21e1625e6664453df160a14fa78.webp" />
        <meta property="og:release_date" content="2025-03-14T07:04:39" />
    <meta property="og:updated_time" content="2025-03-14T07:04:39" />
        <meta property="og:description" content="文章目录  标准函数和静态方法   标准函数   with函数 run函数 apply函数   静态方法   单例类 companion object 注解 顶层方法         标准函数  标准" />
        
    <link href="/assets/website/css/clashv2rayfree/bootstrap.css" rel="stylesheet" type="text/css" media="all">
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <!-- Custom Theme files -->
    <link href="/assets/website/css/clashv2rayfree/style.css" rel="stylesheet" type="text/css" media="all" />
    <!-- Custom Theme files -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashv2rayfree/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <script type="application/x-javascript">
    addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);

    function hideURLbar() { window.scrollTo(0, 1); }
    </script>
    <!--Google Fonts-->
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,500,700' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Ubuntu+Condensed' rel='stylesheet' type='text/css'>
    <!--google fonts-->
    <script src="/assets/website/js/frontend/clashv2rayfree/jquery-1.11.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashv2rayfree/bootstrap.min.js"></script>

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Kotlin的标准函数和静态方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-DEDMWHR2YW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-DEDMWHR2YW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-top start here-->
    <div class="top-header">
    </div>
    <!--header-top end here-->
    <!--header start here-->
    <!-- NAVBAR
		================================================== -->
    <div class="header w3l">
        <div class="fixed-header">
            <div class="navbar-wrapper">
                <div class="container">
                    <nav class="navbar navbar-inverse navbar-static-top">
                        <div class="navbar-header">
                            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                                <span class="sr-only">Toggle navigation</span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <div class="logo">
                                                                <a class="navbar-brand" href="/">VPN专线</a>
                                                            </div>
                        </div>
                        <div id="navbar" class="navbar-collapse collapse">
                            <nav class="cl-effect-16" id="cl-effect-16">
                                <ul class="nav navbar-nav">
                                                                        <li>
                                        <a href="/">首页</a>
                                    </li>
                                                                        <li>
                                        <a href="/free-nodes/">免费节点</a>
                                    </li>
                                                                        <li>
                                        <a href="/paid-subscribe/">推荐机场</a>
                                    </li>
                                                                        <li>
                                        <a href="/news/">新闻资讯</a>
                                    </li>
                                                                        <li>
                                        <a href="/client.htm">客户端</a>
                                    </li>
                                                                    </ul>
                            </nav>
                        </div>
                        <div class="clearfix"> </div>
                    </nav>
                </div>
                <div class="clearfix"> </div>
            </div>
        </div>
    </div>
    <!--header end here-->
    <!--about strat here-->
    <div class="about">
        <div class="container">
            <div class="about-main">
                <div class="row">
                    <div class="col-md-9">
                        <ol class="breadcrumb">
                          <li><a href="/">首页</a></li>
                          <li><a href="/news/">新闻资讯</a></li>
                          <li class="active">正文</li>
                        </ol>
                        <div class="about-top">
                            <h1>Kotlin的标准函数和静态方法</h1>
                        </div>
                        <div class="about-bottom">
                                            <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_1" rel="nofollow">标准函数和静态方法</a></li> <li> <ul> <li><a href="#_3" rel="nofollow">标准函数</a></li> <li> <ul> <li><a href="#with_8" rel="nofollow">with函数</a></li> <li><a href="#run_58" rel="nofollow">run函数</a></li> <li><a href="#apply_82" rel="nofollow">apply函数</a></li> </ul> </li> <li><a href="#_102" rel="nofollow">静态方法</a></li> <li> <ul> <li><a href="#_108" rel="nofollow">单例类</a></li> <li><a href="#companion_object_123" rel="nofollow">companion object</a></li> <li><a href="#_142" rel="nofollow">注解</a></li> <li><a href="#_166" rel="nofollow">顶层方法</a></li> </ul> </li> </ul> </li> </ul> </div> </h1> <h2> <a id="_3" rel="nofollow"></a>标准函数</h2> <ul> <li>标准函数就是在Standard.kt文件中定义的函数,任何Kotlin代码都可以自由地调用所有的标准函数</li> <li>let函数就属于是一个标准函数,经常配合?.操作符来进行判空处理</li> </ul> <h3> <a id="with_8" rel="nofollow"></a>with函数</h3> <ul> <li>with函数接收两个参数,第一参数可以是任何类型的对象,第二个参数是一个Lambda表达式</li> <li>with函数会在Lambda表达式中提供第一个参数的上下文,并使用Lambda表达式的最后一行代码作为函数的返回值</li> <li>示例代码</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//这里是obj对象的上下文</span>     <span class="token string-literal singleline"><span class="token string">"value"</span></span><span class="token comment">//这里是with函数的返回值</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>with函数的作用.假如现在有个需求让吃完所有的水果并且将结果打印出来,代码可以这样写</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>     <span class="token keyword">val</span> sb <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>fruits <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>     <span class="token keyword">val</span> res <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>利用with函数可以这样写,可以看到在Lambda表达式中,都是StringBuilder的上下文,那么就不需要我们通过StringBuilder的实例调用append()方法了,而是直接使用append()方法即可.</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">fun</span> <span class="token function">withTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>     <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>fruits <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>             <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>         <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//最后一行就是函数的返回值</span>     <span class="token punctuation">}</span>     <span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="run_58" rel="nofollow"></a>run函数</h3> <ul> <li>run函数和with函数基本类似,区别就是,run函数不能直接调用,需要在某个对象的基础上进行调用</li> <li>其次run函数只接受一个Lambda参数,并且在Lambda表达式中提供调用对象的上下文.</li> <li>其他和with函数都是一样的</li> <li>使用run函数完成上述需求的实例</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">fun</span> <span class="token function">runTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>     <span class="token comment">//将StringBuilder调出来,用来调用run函数</span>     <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>fruits <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>             <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>         <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="apply_82" rel="nofollow"></a>apply函数</h3> <ul> <li>apply函数和run函数基本一样,就是apply函数不能指定返回值,只能返回调用调用者的本身</li> <li>apply函数实例</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">fun</span> <span class="token function">applyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">val</span> list <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>     <span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>fruits <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>             <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>         <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="_102" rel="nofollow"></a>静态方法</h2> <ul> <li>静态方法又叫做类方法,就是说不需要实例,直接用类就可以进行调用,一般会将工具类中的方法设置为静态方法,方便调用</li> <li>在java当中的静态方法就是使用static关键字修饰的方法</li> <li>但是在kotlin当中没有直接的静态方法</li> </ul> <h3> <a id="_108" rel="nofollow"></a>单例类</h3> <ul> <li>在kotlin当中要是想要定义一个工具类,会比较推荐单例类进行实现</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">object</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token keyword">fun</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do something"</span></span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>虽然单例类中的doAction()方法并不是静态放啊,但是我们还是可以直接使用Util.doAction()来进行调用</li> <li>但是单例类的缺点是单例类中的方法都是类似静态方法这种调用方式,但是我们只需要让类中的一个方法变成静态的怎么办?</li> </ul> <h3> <a id="companion_object_123" rel="nofollow"></a>companion object</h3> <ul> <li>在companion object中定义的方法就可以类似于静态方法那样进行调用了</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token comment">//非静态方法属性</span>     <span class="token keyword">fun</span> <span class="token function">doAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>              <span class="token punctuation">}</span>     <span class="token comment">//拥有静态方法的属性</span>     <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                      <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="_142" rel="nofollow"></a>注解</h3> <ul> <li>单例类和companion object都是在语法形式上模仿了静态方法,实际上不属于真正的静态方法</li> <li>如果我们给单例类或者companion object中的方法加上@JvmStatic注解,那么kotlin编译器就会将这些方法编译成为真正的静态方法</li> <li>如下</li> </ul> <pre><code class="prism language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token comment">//非静态方法属性</span>     <span class="token keyword">fun</span> <span class="token function">doAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>              <span class="token punctuation">}</span>     <span class="token comment">//拥有静态方法的属性</span>     <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{<!-- --></span>         <span class="token annotation builtin">@JvmStatic</span>         <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                      <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <ul> <li>@JvmStatic只能加在单例类或者companion object中的方法</li> </ul> <h3> <a id="_166" rel="nofollow"></a>顶层方法</h3> <ul> <li>顶层方法指的就是没有定义在任何类中的方法,kotlin编译器会将所有的顶层方法编译成为静态方法</li> <li>因此只要定义了一个顶层方法,那么他肯定是一个静态方法</li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-72704.htm">使用Echarts3实现动态折线图</a></p>
                                        <p>下一个：<a href="/news/article-73368.htm">瑞鹏宠物医院贵吗现在还有吗（瑞鹏宠物医院旗下医院）</a></p>
                                    </div>
                                        </div>

                        
                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-66882.htm" title="猫驱虫药水滴哪（猫驱虫药外用往哪滴）">猫驱虫药水滴哪（猫驱虫药外用往哪滴）</a></li>
                        <li class="py-2"><a href="/news/article-66245.htm" title="Hbase基础（特点、架构、应用场景、集群搭建、HA设计）这一篇就够了">Hbase基础（特点、架构、应用场景、集群搭建、HA设计）这一篇就够了</a></li>
                        <li class="py-2"><a href="/news/article-67501.htm" title="Pytorch版本yolov3部分代码语句分析">Pytorch版本yolov3部分代码语句分析</a></li>
                        <li class="py-2"><a href="/news/article-72044.htm" title="宠物粮加工厂总投资多少亿（宠物粮加工厂总投资多少亿元）">宠物粮加工厂总投资多少亿（宠物粮加工厂总投资多少亿元）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-3-free-subscribe-node.htm" title="VPN专线 | 3月3日19M/S|免费Shadowrocket/V2ray/Clash/SSR免费节点订阅分享">VPN专线 | 3月3日19M/S|免费Shadowrocket/V2ray/Clash/SSR免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-66137.htm" title="天津宠物领养救助中心在哪 天津宠物领养救助中心在哪里">天津宠物领养救助中心在哪 天津宠物领养救助中心在哪里</a></li>
                        <li class="py-2"><a href="/news/article-68135.htm" title="水产兽医资格证报考条件（水产执业兽医考试条件）">水产兽医资格证报考条件（水产执业兽医考试条件）</a></li>
                        <li class="py-2"><a href="/news/article-70720.htm" title="动物疫苗接种间隔时间短有什么危害嘛知乎（动物疫苗管多久）">动物疫苗接种间隔时间短有什么危害嘛知乎（动物疫苗管多久）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-free-node-subscribe-links.htm" title="VPN专线 | 3月7日18M/S|免费Clash/SSR/V2ray/Shadowrocket免费节点订阅分享">VPN专线 | 3月7日18M/S|免费Clash/SSR/V2ray/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-72043.htm" title="领养宠物协议书范本下载电子版大全（领养宠物协议怎么写）">领养宠物协议书范本下载电子版大全（领养宠物协议怎么写）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--about end here-->
        <!--copy rights start here-->
    <div class="copy-rights">
        <div class="container">
            <div class="copy-rights-main">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    VPN专线 订阅机场节点中文网 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </div>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>